name: Build and Publish Cross-Platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Used to stamp binaries
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: 1

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.tag.outputs.tag }}
    strategy:
      matrix:
        target:
          - os: windows
            runtime: win-x64
            ext: zip
            artifact: conductor-health-check-windows
            exe: Conductor_Health_Check.exe
          - os: linux
            runtime: linux-x64
            ext: tar.gz
            artifact: conductor-health-check-linux
            exe: Conductor_Health_Check

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Compute release tag
        id: tag
        run: |
          TAG="v$(date -u +'%Y.%m.%d')-${GITHUB_SHA:0:7}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "Release tag: $TAG"

      - name: Restore
        run: dotnet restore Conductor_Health_Check.sln

      - name: Test
        run: dotnet test Conductor_Health_Check.sln --no-restore --verbosity normal

      - name: Publish ${{ matrix.target.os }}
        run: |
          dotnet publish Conductor_Health_Check/Conductor_Health_Check.csproj \
            -c Release \
            -r ${{ matrix.target.runtime }} \
            --self-contained true \
            -p:PublishSingleFile=true \
            -p:PublishTrimmed=true \
            -o out/${{ matrix.target.os }}

      - name: Package ${{ matrix.target.os }}
        run: |
          mkdir -p dist
          cd out/${{ matrix.target.os }}

          # ensure Linux binary is executable
          if [ "${{ matrix.target.os }}" = "linux" ]; then chmod +x "${{ matrix.target.exe }}"; fi

          # 1) versioned file
          VER_FILE="${{ matrix.target.artifact }}-${{ steps.tag.outputs.tag }}.${{ matrix.target.ext }}"
          # 2) latest file (constant name)
          LATEST_FILE="${{ matrix.target.artifact }}.${{ matrix.target.ext }}"

          if [ "${{ matrix.target.ext }}" = "zip" ]; then
            zip -r "../../dist/$VER_FILE" .
            cp "../../dist/$VER_FILE" "../../dist/$LATEST_FILE"
          else
            tar -czf "../../dist/$VER_FILE" .
            cp "../../dist/$VER_FILE" "../../dist/$LATEST_FILE"
          fi

          cd -

      - name: Upload packaged artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.artifact }}-packaged
          path: dist/*
          if-no-files-found: error
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    permissions:
      contents: write

    steps:
      - name: Download packaged artifacts
        uses: actions/download-artifact@v4
        with:
          # grabs both linux and windows packaged artifacts into ./artifacts
          path: artifacts

      - name: Show files
        run: find artifacts -type f -maxdepth 3 -print

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.release_tag }}
          name: Release ${{ needs.build.outputs.release_tag }}
          body: |
            ## Conductor Health Check
            Cross-platform binaries (Windows & Linux).
            - Windows: `conductor-health-check-windows.zip` (also `-<tag>.zip`)
            - Linux: `conductor-health-check-linux.tar.gz` (also `-<tag>.tar.gz`)
          draft: false
          prerelease: false
          files: |
            artifacts/**/conductor-health-check-windows.zip
            artifacts/**/conductor-health-check-linux.tar.gz
            artifacts/**/conductor-health-check-windows-*.zip
            artifacts/**/conductor-health-check-linux-*.tar.gz
